// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @default(now()) @map(name: "updated_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @map(name: "updated_at")

    accounts Account[]
    sessions Session[]
    slangs   Slang[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Slang {
    id            String         @id @default(cuid())
    slang         String
    slug          String         @unique
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    diminutive    String?
    augmentative  String?
    explicit      Boolean
    spellings     Spelling[]
    synonyms      Synonym[]
    antonyms      Antonym[]
    abbreviations Abbreviation[]
    definitions   Definition[]
    tags          Tag[]

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    @@index([authorId])
    @@index([slang, slug])
    @@fulltext([slang])
}

model Spelling {
    id       String @id @default(cuid())
    spelling String @unique
    slang    Slang  @relation(fields: [slangId], references: [slug], onDelete: Cascade)
    slangId  String

    @@index([spelling, slangId])
    @@index([slangId])
    @@fulltext([spelling])
}

model Tag {
    id     String  @id @default(cuid())
    tag    String  @unique
    slangs Slang[]

    @@index([tag])
}

model Synonym {
    id      String  @id @default(cuid())
    synonym String  @unique
    slangs  Slang[]

    @@index([synonym])
}

model Antonym {
    id      String  @id @default(cuid())
    antonym String  @unique
    slangs  Slang[]

    @@index([antonym])
}

model Abbreviation {
    id           String  @id @default(cuid())
    abbreviation String  @unique
    slangs       Slang[]

    @@index([abbreviation])
}

// DEFINITION

model Definition {
    id         String    @id @default(cuid())
    definition String    @db.Text
    examples   Example[]
    idiom      String?
    pos        Pos
    slang      Slang     @relation(fields: [slangId], references: [slug], onDelete: Cascade)
    slangId    String

    @@index([slangId])
}

model Example {
    id           String      @id @default(cuid())
    example      String      @db.Text
    definition   Definition? @relation(fields: [definitionId], references: [id], onDelete: Cascade)
    definitionId String?

    @@index([definitionId])
}

enum Pos {
    adjective
    adverb
    conjunction
    determiner
    idiom
    interjection
    noun
    preposition
    pronoun
    verb
}
